{"version":3,"sources":["logo.svg","App.js","serviceWorker.js","index.js"],"names":["module","exports","App","props","handleChange","event","value","setState","probability","state","emoji","previousEmoji","selectedEmojis","Math","floor","random","push","selectedEmoji","length","this","generateEmoji","newValue","console","log","Number","makeStyles","root","maxWidth","media","height","classes","useStyles","className","Slider","aria-labelledby","step","marks","valueLabelDisplay","onChange","Typography","id","gutterBottom","Card","CardActionArea","CardMedia","image","title","CardContent","variant","component","Button","color","onClick","role","aria-label","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"qJAAAA,EAAOC,QAAU,IAA0B,kC,uNCiH5BC,E,kDAnGb,WAAYC,GAAQ,IAAD,8BACjB,cAAMA,IAoDRC,aAAe,SAACC,EAAOC,GAAR,OAAkB,EAAKC,SAAS,CAAEC,YAAaF,KAlD5D,EAAKG,MAAQ,CACTC,MAAO,eACPF,YAAa,IALA,E,0DASLG,EAAeH,GAC3B,IAKII,EAAiB,GAFAC,KAAKC,MAAsB,IAAhBD,KAAKE,UAIlBP,EAEjBI,EAAeI,KAAf,MAAAJ,EATgB,CAAC,eAAM,eAAM,iBAY7BA,EAAeI,KAAf,MAAAJ,EAXiB,CAAC,eAAM,eAAM,iBAgBhC,IAAMK,EAAgBL,EAAeC,KAAKC,MAAMD,KAAKE,SAAWH,EAAeM,SAE/E,GAAIP,IAAkBM,EAClB,OAAOE,KAAKC,cAAcT,EAAeH,GAG7CW,KAAKZ,SAAS,CAACG,MAAOO,M,wCAGNZ,EAAOgB,GACvBC,QAAQC,IAAIlB,GAEZc,KAAKZ,SAAS,CAACC,YAAagB,OAAOH,O,kCAInC,OAAOI,YAAW,CAChBC,KAAM,CACJC,SAAU,KAEZC,MAAO,CACLC,OAAQ,S,+BAOJ,IAAD,OACDC,EAAUX,KAAKY,YAErB,OACE,yBAAKC,UAAU,IACb,yBAAKA,UAAU,YACb,kBAACC,EAAA,EAAD,CACE3B,MAAOa,KAAKV,MAAMD,YAClB0B,kBAAgB,yBAChBC,KAAM,EACNC,OAAO,EACPC,kBAAkB,KAClBC,SAAUnB,KAAKf,eAEjB,kBAACmC,EAAA,EAAD,CAAYC,GAAG,yBAAyBC,cAAY,GAApD,2BAGA,kBAACC,EAAA,EAAD,CAAMV,UAAWF,EAAQJ,MACvB,kBAACiB,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,CACEZ,UAAWF,EAAQF,MACnBiB,MAAM,aACNC,MAAM,0BAER,kBAACC,EAAA,EAAD,KACE,kBAACR,EAAA,EAAD,CAAYE,cAAY,EAACO,QAAQ,KAAKC,UAAU,MAC7C9B,KAAKV,MAAMC,UAKpB,kBAACwC,EAAA,EAAD,CAAQF,QAAQ,YAAYG,MAAM,UAAUC,QAAS,kBAC/C,EAAKhC,cAAc,EAAKX,MAAMC,MAAO,EAAKD,MAAMD,eAEpD,0BAAM6C,KAAK,MAAMC,aAAW,gBAA5B,yC,GA1FMC,IAAMC,WCDJC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLpD,QAAQoD,MAAMA,EAAMC,c","file":"static/js/main.671da91b.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport Button from '@material-ui/core/Button';\nimport { makeStyles } from '@material-ui/core/styles';\nimport Typography from '@material-ui/core/Typography';\nimport Slider from '@material-ui/core/Slider';\nimport Card from '@material-ui/core/Card';\nimport CardActionArea from '@material-ui/core/CardActionArea';\nimport CardContent from '@material-ui/core/CardContent';\nimport CardMedia from '@material-ui/core/CardMedia';\n\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n        emoji: '🤔',\n        probability: 50\n    };\n  };\n\n  generateEmoji(previousEmoji, probability) {\n    const badEmojis = ['🥺', '👎', '😞'];\n    const goodEmojis = ['👍', '🤗', '😛'];\n\n    const randomNumber = Math.floor(Math.random() * 100);\n\n    let selectedEmojis = [];\n\n    if (randomNumber > probability) {\n      // bad outcome;\n      selectedEmojis.push(...badEmojis);\n    } else {\n      // good outcome\n      selectedEmojis.push(...goodEmojis);\n    }\n\n    // const emojis = [['👍', true], ['🥺', false], ['👎', false], ['🤗', true], ['😞', false], ['😛', true]];\n\n    const selectedEmoji = selectedEmojis[Math.floor(Math.random() * selectedEmojis.length)];\n\n    if (previousEmoji === selectedEmoji) {\n        return this.generateEmoji(previousEmoji, probability);\n    };\n\n    this.setState({emoji: selectedEmoji});\n  };\n  \n  adjustProbability(event, newValue) {\n    console.log(event);\n\n    this.setState({probability: Number(newValue)})\n  }\n\n  useStyles() {\n    return makeStyles({\n      root: {\n        maxWidth: 345,\n      },\n      media: {\n        height: 140,\n      },\n    });\n  }\n\n  handleChange = (event, value) => this.setState({ probability: value });\n\n  render() {\n    const classes = this.useStyles();\n\n    return (\n      <div className=\"\">\n        <div className=\"centered\">\n          <Slider\n            value={this.state.probability}\n            aria-labelledby=\"discrete-slider-always\"\n            step={1}\n            marks={true}\n            valueLabelDisplay=\"on\"\n            onChange={this.handleChange}\n          />\n          <Typography id=\"discrete-slider-always\" gutterBottom>\n            Adjust your luck above.\n          </Typography>\n          <Card className={classes.root}>\n            <CardActionArea>\n              <CardMedia\n                className={classes.media}\n                image=\"./logo.svg\"\n                title=\"Contemplative Reptile\"\n                />\n              <CardContent>\n                <Typography gutterBottom variant=\"h5\" component=\"h2\">\n                  {this.state.emoji}\n                </Typography>\n              </CardContent>\n            </CardActionArea>\n          </Card>\n          <Button variant=\"contained\" color=\"primary\" onClick={() => \n                this.generateEmoji(this.state.emoji, this.state.probability)\n              }>\n            <span role=\"img\" aria-label=\"queston-mark\">\n            ❓❓❓❓❓\n            </span>\n          </Button>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}