{"version":3,"sources":["images/approval.png","images/disapproval.png","images/questioning.png","App.js","serviceWorker.js","index.js"],"names":["module","exports","DECISIONS_MAP","true","approval","false","disapproval","undefined","questioning","App","props","state","decision","isLoading","ms","Promise","resolve","setTimeout","randomNumber","Math","floor","random","this","setState","sleep","className","Card","sx","width","height","CardActionArea","CircularProgress","p","CardMedia","component","image","Button","m","variant","color","disabled","onClick","generateDecision","role","aria-label","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"4FAAAA,EAAOC,QAAU,IAA0B,sC,mBCA3CD,EAAOC,QAAU,IAA0B,yC,mBCA3CD,EAAOC,QAAU,IAA0B,yC,8TCOrCC,EAAgB,CACpBC,KAAMC,IACNC,MAAOC,IACPC,UAAWC,KA+DEC,E,kDA3Db,WAAYC,GAAQ,IAAD,8BACjB,cAAMA,IACDC,MAAQ,CACTC,cAAUL,EACVM,WAAW,GAJE,E,kDAQbC,GACJ,OAAO,IAAIC,SACT,SAAAC,GAAO,OAAIC,WAAWD,EAASF,Q,gKAK3BI,EAAeC,KAAKC,MAAsB,EAAhBD,KAAKE,UAErCC,KAAKC,SAAS,CAACV,WAAW,I,SAEpBS,KAAKE,MAAM,K,OAEjBF,KAAKC,SAAS,CAAEV,WAAW,IAEvBK,EAAe,EACjBI,KAAKC,SAAS,CAACX,UAAU,IAEzBU,KAAKC,SAAS,CAACX,UAAU,I,qIAInB,IAAD,OACP,OACE,yBAAKa,UAAU,IACb,yBAAKA,UAAU,YACb,kBAACC,EAAA,EAAD,CAAMC,GAAI,CAACC,MAAO,IAAKC,OAAQ,MAC7B,kBAACC,EAAA,EAAD,KACGR,KAAKX,MAAME,UAEd,kBAACkB,EAAA,EAAD,CAAkBJ,GAAI,CAAEK,EAAG,SAEzB,kBAACC,EAAA,EAAD,CACEC,UAAW,MACXC,MAAOjC,EAAcoB,KAAKX,MAAMC,cAItC,kBAACwB,EAAA,EAAD,CAAQT,GAAI,CAAEU,EAAG,GAAIC,QAAQ,YAAYC,MAAM,UAAUC,SAAUlB,KAAKX,MAAME,UAAW4B,QAAS,kBAC5F,EAAKC,qBAET,0BAAMC,KAAK,MAAMC,aAAW,gBAA5B,yC,GAlDMC,IAAMC,WCDJC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.c8e77139.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/approval.00bd8e03.png\";","module.exports = __webpack_public_path__ + \"static/media/disapproval.72bb097b.png\";","module.exports = __webpack_public_path__ + \"static/media/questioning.37442c61.png\";","import React from 'react';\nimport approval from './images/approval.png';\nimport disapproval from './images/disapproval.png';\nimport questioning from './images/questioning.png';\nimport './App.css';\nimport { CardMedia, Button, Card, CardActionArea, CircularProgress } from '@mui/material';\n\nconst DECISIONS_MAP = {\n  true: approval,\n  false: disapproval,\n  undefined: questioning,\n}\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n        decision: undefined,\n        isLoading: false\n    };\n  };\n\n  sleep(ms) {\n    return new Promise(\n      resolve => setTimeout(resolve, ms)\n    );\n  }\n\n  async generateDecision() {\n    const randomNumber = Math.floor(Math.random() * 9);\n\n    this.setState({isLoading: true});\n\n    await this.sleep(500);\n\n    this.setState({ isLoading: false });\n\n    if (randomNumber < 5) {\n      this.setState({decision: false});\n    } else {\n      this.setState({decision: true});\n    }\n  }\n\n  render() {\n    return (\n      <div className=\"\">\n        <div className=\"centered\">\n          <Card sx={{width: 300, height: 300}}>\n            <CardActionArea>\n              {this.state.isLoading ? \n              \n            <CircularProgress sx={{ p: \"45%\" }} /> \n              : \n              <CardMedia\n                component={\"img\"}\n                image={DECISIONS_MAP[this.state.decision]}\n              />}\n            </CardActionArea>\n          </Card>\n          <Button sx={{ m: 2}} variant=\"contained\" color=\"primary\" disabled={this.state.isLoading} onClick={() => \n                this.generateDecision()\n              }>\n            <span role=\"img\" aria-label=\"queston-mark\">\n            ❓❓❓❓❓\n            </span>\n          </Button>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}